#!/usr/bin/perl
use strict;
use warnings;
use Time::HiRes qw(sleep time);

my $script = "/opt/qtbigtext/qtbigtext.py";

my $dbusTimeoutMillis = 1000;
my $dbusRetryDelayMillis = 100;
my $dbusRetryMaxTimeoutMillis = 10000;

sub python();
sub killBigText();
sub isRunning();
sub ensureDbus();
sub dbusTest();
sub dbusSetText($);
sub dbusSend($@);
sub setBigText($$);
sub restartBigtext($$);

my $usage = "Usage:
  $0 -h|--help
     Show this message

  $0 [OPTS] -k
     Kill qtbigtext

  $0 [OPTS] --ensure-dbus
     check for dbus service every ${dbusTimeoutMillis}ms
     exit when it succeeds, OR after ${dbusRetryMaxTimeoutMillis}ms

  $0 [OPTS] --wait [TEXT TEXT ...]
  $0 [OPTS] --wait FILE_NAME
    invoke qtbigtext directly and wait for it to end

  $0 [OPTS] --stdin
     Read lines from stdin, backslash interpolate them,
       and call qtbigtext for each parsed line

  $0 [OPTS] FILE_NAME
     Read FILE_NAME and call qtbigtext with the contents

  $0 [OPTS] [TEXT TEXT ...]
     Call qtbigtxt with \"TEXT TEXT ...\"

  qtbigtext is called with dbus-send if its running,
    or invoked directly otherwise.

  OPTS are --KEY=VAL {VAL can be empty}, and are passed into qtbigtext
    only when invoked directly.
";

sub main(@){
  die $usage if @_ == 1 and $_[0] =~ /^(-h|--help)$/;

  my $opts = [];
  while(@_ > 0 and $_[0] =~ /^--[a-zA-Z0-9_\-]+=.*$/){
    push @$opts, shift;
  }

  my $cmd = '';
  $cmd = shift if @_ > 0 and $_[0] =~ /^(-k|--ensure-dbus|--stdin|--wait)$/;

  if($cmd eq "-k"){
    die $usage if @_ > 0;
    killBigText();
  }elsif($cmd eq "--ensure-dbus"){
    ensureDbus();
  }elsif($cmd eq "--stdin"){
    die $usage if @_ > 0;
    my $line;
    while($line = <STDIN>){
      my $str = $line;
      chomp $str;
      my %backslashReplace = (
        "\\" => "\\",
        "t" => "\t",
        "n" => "\n",
        "r" => "",
      );
      $str =~ s/\\([\\tn])/$backslashReplace{$1}/g;
      setBigText $str, $opts if $str ne "";
    }
  }elsif($cmd eq "--wait"){
    my $text;
    if(@_ == 1 and $_[0] !~ /\n/ and -e $_[0]){
      my $file = shift;
      open FH, "< $file";
      $text = join '', <FH>;
      close FH;
    }else{
      $text = "@_";
    }
    my $python = python();
    exec $python, $script, @$opts, $text;
  }else{
    my $text;
    if(@_ == 1 and $_[0] !~ /\n/ and -e $_[0]){
      my $file = shift;
      open FH, "< $file";
      my $contents = join '', <FH>;
      close FH;
      $text = $contents;
    }else{
      $text = "@_";
    }
    setBigText $text, $opts;
  }
}

sub python(){
  my $python = '';
  $python = `which python3   2>/dev/null` if $python !~ /python/;
  $python = `which python2.7 2>/dev/null` if $python !~ /python/;
  $python = `which python2.6 2>/dev/null` if $python !~ /python/;
  $python = `which python2   2>/dev/null` if $python !~ /python/;
  $python = `which python    2>/dev/null` if $python !~ /python/;
  chomp $python;
  return $python;
}

sub killBigText(){
  my $python = python();
  system "pkill", "-f", "^$python.*$script";
}

sub isRunning(){
  my $python = python();
  system "pkill", "-0", "-f", "^$python.*$script";
  return $? == 0;
}

sub ensureDbus(){
  my $startMillis = int(time * 1000.0);
  while(not dbusTest){
    my $nowMillis = int(time * 1000.0);
    if($nowMillis - $startMillis > $dbusRetryMaxTimeoutMillis){
      die "FATAL: qtbigtext dbus failed to start\n";
    }
    sleep $dbusRetryDelayMillis/1000;
  }
}
sub dbusTest(){
  return dbusSend "test";
}
sub dbusSetText($){
  my $str = shift;
  return dbusSend "setText", "string:$str";
}
sub dbusSend($@){
  my ($method, @args) = @_;
  my $dest = "org.teleshoes.qtbigtext";
  my $path = "/";
  my @cmd = ("dbus-send",
    "--session",
    "--print-reply",
    "--type=method_call",
    "--reply-timeout=$dbusTimeoutMillis",
    "--dest=$dest",
    $path,
    "$dest.$method",
    @args,
  );
  system @cmd;
  return $? == 0;
}

sub setBigText($$){
  my $str = shift;
  my $opts = shift;

  if(isRunning and dbusTest){
    if(dbusSetText $str){
      print "dbus succeeded\n";
    }else{
      print "dbus failed, restarting\n";
      restartBigtext $str, $opts;
    }
  }else{
    print "not running or stalled, restarting\n";
    restartBigtext $str, $opts;
  }
}

sub restartBigtext($$){
  my ($str, $opts) = @_;
  print "killing $script\n";
  killBigText();
  print "(re)running $script\n";
  my $python = python;
  $str =~ s/'/'\\''/g;
  system "$python $script @$opts '$str' &";

  ensureDbus();
}

&main(@ARGV);
